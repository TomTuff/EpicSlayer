//fighting
function Escape : boolean;
begin
  //if out of food/supplies/inv full
  //telly out of place
  result := true;
end;

function WaitForMonster : boolean;
begin
  result := true;
end;

function GetDrops : boolean;
begin
  //if infight then exit?
  //checks if invfull, then looks for drop to pick up
  result := true;
end;

function FindMonster : boolean;
var
  TempMArr : TNPCArray;
  i, c : integer;
  //tva : TVarriantArray;
label Start;
begin
  result := false;
  Start:
  if c > 50 then
  begin
    writeln('Cannot find monster');
    Escape;
    exit;
  end;
  TempMArr := R_GetNPCsMulti(Monsters[slayers[CurrentPlayer].Assignment.Monster].name, false);
  if length(TempMArr) <= 0 then
  begin
    waitformonster;
    inc(c);
    goto Start;
  end;
  for i := 0 to high(TempMArr) do
    if  TempMArr[i].InCombat or (not r_tileonmm(TempMArr[i].tile)) then
      continue
    else
      break;
  if i > high(TempMArr) then
  begin
    waitformonster;
    inc(c);
    goto Start;
  end;
  r_walktotile(TempMArr[i].tile, 3, 0);
  result := r_tileonms(TempMArr[i].tile, 0);
  if not result then goto start;
  writeln('Found Monster');
end;

function CheckFood : boolean;
var
  Food : TInvItemArray;
  i : integer;
begin
  result := false;
  if not R_ItemExistsEx([FOOD_TUNA, FOOD_TROUT, FOOD_LOBSTER, FOOD_MONKFISH,
                     FOOD_SWORDFISH, FOOD_SHARK], Food) then
    exit;

  if HPPercent < 50 then
    for i := 0 to high(food) do
    begin
      writeln('Eating, in loop');
      R_ClickItem(Food[i].slot, 'Eat');
      wait(1250 + random(500));
      if HPPercent > 75 then break;
    end;
  if HPPercent < 50 then
  begin
    writeln('Eating didn''t help. Exiting');
    Escape;
    exit;
  end;

  result := true;
end;

function CheckPotion : boolean;
begin
  //checks if we have potions
  //takes them if needed, escape and resupply
  //if no pots, and required
  result := true;
end;

function CheckTask : boolean;
begin
  //gets the current task,
  //checks location
  //react accordingly
  result := true;
end;

function CheckInventory : boolean;
begin
  CheckFood;
  result := false;
end;

function FightMonster : boolean;
var
  TempMArr : TNPCArray;
  tmpMonster : TMonster;
  i, c : integer;
  tp : TPoint;
label
  here;
begin
  tmpMonster := Monsters[slayers[CurrentPlayer].Assignment.Monster];
  here:
  inc(c);
  if c > 10 then
  begin
    escape;
    exit;
  end;
  if not FindMonster then escape;
  TempMArr := R_GetNPCsMulti(tmpMonster.name, false);
  for i := 0 to high(TempMArr) do
  begin
    if TempMArr[i].incombat then continue;
    tp := r_tiletoms(TempMArr[i].Tile, round(TempMArr[i].Height * 0.75));
    break;
  end;
  writeln(TempMArr[i]);
  {  }
  if not tmpMonster.UseReflection then
    with tmpMonster do
    ClickNPC(true, TempMArr[i], Color, Tolerance, HueMod, SatMod, 7, 3, [TempMArr[i].name], true, ['ttack'])
  else
  begin
    mmouse(tp.x, tp.y, 3, 3);
    if not waituptext('ttack', 2000) then goto here;
    getmousepos(tp.x, tp.y);
    mouse(tp.x, tp.y, 0, 0, true);
  end;
  result := didredclick;
  writeln('Clicked monster');
end;

function SetupFighting : boolean;
begin
  result := false;
  if not LoggedIn then
    loginplayer;
  R_FindRandoms;

  SetAngle(true);
  SetRun(true);

  if not CheckTask then
    exit;//dosomething
  result := true;
end;

function DoFight : boolean;
var
  c, count : integer;
begin
  SetupFighting;
  CheckFood;
  CheckPotion;
  repeat
    writeln('Finding monster');

    if not CheckFood or CheckPotion then //if out of food or pots
      if not Escape then //if cannot escape/go to bank
        exit;//do something
    if not R_InCombat then //if not in combat then attack monster
      if not FightMonster then continue;
    if didredclick then //checks if actually clicked monster
      while not r_InCombat do wait(10 + random(10));
    while R_InCombat do //loops through while in combat
    begin
      writeln('In combat loop');
      //AntiBan
      //check if dead
      CheckInventory;     //eat food
      CheckPotion;   //take pots
      wait(500 + random(500));
      inc(c);
      if c > 180 then  //if in combat for more than min and half break
      begin
        writeln('Been in fight for to long');
        break;
      end;
    end;
    GetDrops; //checks for drops
    inc(count); //failsafe
  until {find dead} CheckInventory or (count > 300);
end;             //checks inventory, if we have supplies, and checks if we looped through to much
